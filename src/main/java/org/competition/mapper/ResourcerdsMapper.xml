<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.competition.mapper.ResourcerdsMapper" >
  <resultMap id="BaseResultMap" type="org.competition.domain.Resourcerds" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="order_id" property="orderId" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="create_user" property="createUser" jdbcType="VARCHAR" />
    <result column="update_user" property="updateUser" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="memory" property="memory" jdbcType="INTEGER" />
    <result column="storage" property="storage" jdbcType="INTEGER" />
    <result column="instance" property="instance" jdbcType="INTEGER" />
    <result column="network" property="network" jdbcType="INTEGER" />
    <result column="quantity" property="quantity" jdbcType="INTEGER" />
    <result column="backup" property="backup" jdbcType="VARCHAR" />
    <result column="backup1" property="backup1" jdbcType="VARCHAR" />
    <result column="backup2" property="backup2" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, name, order_id, create_time, update_time, create_user, update_user, type, memory, 
    storage, instance, network, quantity, backup, backup1, backup2
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="org.competition.domain.ResourcerdsExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from resourcerds
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>

  <select id="selectByResourcerds" resultMap="BaseResultMap" parameterType="org.competition.domain.Resourcerds" >
    select <include refid="Base_Column_List"/> from resourcerds
    <where>
      <if test="orderId != null">
        order_id = #{orderId}
      </if>
    </where>
  </select>


  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from resourcerds
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from resourcerds
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="org.competition.domain.ResourcerdsExample" >
    delete from resourcerds
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="org.competition.domain.Resourcerds" >
    insert into resourcerds (id, name, order_id, 
      create_time, update_time, create_user, 
      update_user, type, memory, 
      storage, instance, network, 
      quantity, backup, backup1, 
      backup2)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{orderId,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{createUser,jdbcType=VARCHAR}, 
      #{updateUser,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, #{memory,jdbcType=INTEGER}, 
      #{storage,jdbcType=INTEGER}, #{instance,jdbcType=INTEGER}, #{network,jdbcType=INTEGER}, 
      #{quantity,jdbcType=INTEGER}, #{backup,jdbcType=VARCHAR}, #{backup1,jdbcType=VARCHAR}, 
      #{backup2,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.competition.domain.Resourcerds" >
    insert into resourcerds
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="orderId != null" >
        order_id,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="createUser != null" >
        create_user,
      </if>
      <if test="updateUser != null" >
        update_user,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="memory != null" >
        memory,
      </if>
      <if test="storage != null" >
        storage,
      </if>
      <if test="instance != null" >
        instance,
      </if>
      <if test="network != null" >
        network,
      </if>
      <if test="quantity != null" >
        quantity,
      </if>
      <if test="backup != null" >
        backup,
      </if>
      <if test="backup1 != null" >
        backup1,
      </if>
      <if test="backup2 != null" >
        backup2,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="orderId != null" >
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="updateUser != null" >
        #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="memory != null" >
        #{memory,jdbcType=INTEGER},
      </if>
      <if test="storage != null" >
        #{storage,jdbcType=INTEGER},
      </if>
      <if test="instance != null" >
        #{instance,jdbcType=INTEGER},
      </if>
      <if test="network != null" >
        #{network,jdbcType=INTEGER},
      </if>
      <if test="quantity != null" >
        #{quantity,jdbcType=INTEGER},
      </if>
      <if test="backup != null" >
        #{backup,jdbcType=VARCHAR},
      </if>
      <if test="backup1 != null" >
        #{backup1,jdbcType=VARCHAR},
      </if>
      <if test="backup2 != null" >
        #{backup2,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="org.competition.domain.ResourcerdsExample" resultType="java.lang.Integer" >
    select count(*) from resourcerds
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update resourcerds
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null" >
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.orderId != null" >
        order_id = #{record.orderId,jdbcType=INTEGER},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUser != null" >
        create_user = #{record.createUser,jdbcType=VARCHAR},
      </if>
      <if test="record.updateUser != null" >
        update_user = #{record.updateUser,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.memory != null" >
        memory = #{record.memory,jdbcType=INTEGER},
      </if>
      <if test="record.storage != null" >
        storage = #{record.storage,jdbcType=INTEGER},
      </if>
      <if test="record.instance != null" >
        instance = #{record.instance,jdbcType=INTEGER},
      </if>
      <if test="record.network != null" >
        network = #{record.network,jdbcType=INTEGER},
      </if>
      <if test="record.quantity != null" >
        quantity = #{record.quantity,jdbcType=INTEGER},
      </if>
      <if test="record.backup != null" >
        backup = #{record.backup,jdbcType=VARCHAR},
      </if>
      <if test="record.backup1 != null" >
        backup1 = #{record.backup1,jdbcType=VARCHAR},
      </if>
      <if test="record.backup2 != null" >
        backup2 = #{record.backup2,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update resourcerds
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      order_id = #{record.orderId,jdbcType=INTEGER},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      create_user = #{record.createUser,jdbcType=VARCHAR},
      update_user = #{record.updateUser,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=INTEGER},
      memory = #{record.memory,jdbcType=INTEGER},
      storage = #{record.storage,jdbcType=INTEGER},
      instance = #{record.instance,jdbcType=INTEGER},
      network = #{record.network,jdbcType=INTEGER},
      quantity = #{record.quantity,jdbcType=INTEGER},
      backup = #{record.backup,jdbcType=VARCHAR},
      backup1 = #{record.backup1,jdbcType=VARCHAR},
      backup2 = #{record.backup2,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="org.competition.domain.Resourcerds" >
    update resourcerds
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="orderId != null" >
        order_id = #{orderId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        create_user = #{createUser,jdbcType=VARCHAR},
      </if>
      <if test="updateUser != null" >
        update_user = #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="memory != null" >
        memory = #{memory,jdbcType=INTEGER},
      </if>
      <if test="storage != null" >
        storage = #{storage,jdbcType=INTEGER},
      </if>
      <if test="instance != null" >
        instance = #{instance,jdbcType=INTEGER},
      </if>
      <if test="network != null" >
        network = #{network,jdbcType=INTEGER},
      </if>
      <if test="quantity != null" >
        quantity = #{quantity,jdbcType=INTEGER},
      </if>
      <if test="backup != null" >
        backup = #{backup,jdbcType=VARCHAR},
      </if>
      <if test="backup1 != null" >
        backup1 = #{backup1,jdbcType=VARCHAR},
      </if>
      <if test="backup2 != null" >
        backup2 = #{backup2,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.competition.domain.Resourcerds" >
    update resourcerds
    set name = #{name,jdbcType=VARCHAR},
      order_id = #{orderId,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=VARCHAR},
      update_user = #{updateUser,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      memory = #{memory,jdbcType=INTEGER},
      storage = #{storage,jdbcType=INTEGER},
      instance = #{instance,jdbcType=INTEGER},
      network = #{network,jdbcType=INTEGER},
      quantity = #{quantity,jdbcType=INTEGER},
      backup = #{backup,jdbcType=VARCHAR},
      backup1 = #{backup1,jdbcType=VARCHAR},
      backup2 = #{backup2,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>